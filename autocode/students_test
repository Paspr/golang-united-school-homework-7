package coverage

import (
	"os"
	"testing"
	"time"
	"reflect"
)

// DO NOT EDIT THIS FUNCTION
func init() {
	content, err := os.ReadFile("students_test.go")
	if err != nil {
		panic(err)
	}
	err = os.WriteFile("autocode/students_test", content, 0644)
	if err != nil {
		panic(err)
	}
}

// WRITE YOUR CODE BELOW

func TestLen(t *testing.T) {
	var people People

	if people.Len() != 0 {
		t.Errorf("length should be 0")
	}

	people = append(people, Person{})
	
	if people.Len() != 1 {
		t.Errorf("length should be 1")
	}

	people = nil

	if people != nil {
		t.Errorf("should be nil value")
	}
}

func TestLess(t *testing.T) {
	timeOne := time.Date(2022, time.April, 1, 0, 0, 0, 0, time.UTC)
	timeTwo := time.Date(2020, time.April, 1, 0, 0, 0, 0, time.UTC)
	
	people := People{
		Person{firstName: "A", lastName: "A", birthDay: timeOne},
		Person{firstName: "A", lastName: "C", birthDay: timeTwo},
		Person{firstName: "A", lastName: "B", birthDay: timeOne},
		Person{firstName: "A", lastName: "A", birthDay: timeOne},
		Person{firstName: "B", lastName: "A", birthDay: timeOne},
	}

	if people.Less(1, 0) {
		t.Errorf("should not be less by birthday")
	}

	if people.Less(1, 2) {
		t.Errorf("should not be less by lastname")
	}

	if people.Less(4, 0) {
		t.Errorf("should not be less by firstname")
	}

	if people.Less(0, 3) {
		t.Errorf("should be identical")
	}
}

func TestSwap(t *testing.T) {
	timeOne := time.Date(2022, time.April, 1, 0, 0, 0, 0, time.UTC)

	people := People{
		Person{firstName: "A", lastName: "C", birthDay: timeOne},
		Person{firstName: "A", lastName: "A", birthDay: timeOne},
	}

	people2 := People{
		Person{firstName: "A", lastName: "A", birthDay: timeOne},
		Person{firstName: "A", lastName: "C", birthDay: timeOne},
	}

	people.Swap(0, 1)

	if !reflect.DeepEqual(people, people2) {
		t.Errorf("swap order is not right")
	}

}

func TestNew(t *testing.T) {
	matrix, error := New("1 2 \n 1 2 3")
	if matrix != nil || error.Error() != "Rows need to be the same length" {
		t.Errorf("different rows length")
	}
}